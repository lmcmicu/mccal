#!/usr/bin/env python3

# Copyright 2014-2024 Michael Cuffaro
# 
# This file is part of mccal.
# 
# mccal is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# mccal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with mccal.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import re
import sys
import time
from datetime import date, datetime, timedelta


def get_events(calendar_file, include_snoozes, include_remind_time, year, month, day, delta):
  with open(calendar_file) as f:
    events = []
    for line in f:
      line = line.rstrip('\n')
      snoozed = line.startswith('SNOOZE')
      if not include_snoozes and snoozed:
        continue

      # Remove the initial portion of the line:
      event = re.sub("^(SNOOZE )?ID:\S+ ", "", line)

      # Remove date and time separators ("/" and ":"):
      event = re.sub(
        r"""
        ([0-9]{1,4})-
        ([0-9]{1,2})-
        ([0-9]{1,2})\s+
        ([0-9]{1,2}):
        ([0-9]{1,2})\s+
        "
        ([0-9]{1,4})-
        ([0-9]{1,2})-
        ([0-9]{1,2})\s+
        ([0-9]{1,2}):
        ([0-9]{1,2})\s+
        (.*?)
        "
        """,
        '\g<1> \g<2> \g<3> \g<4> \g<5> \g<6> \g<7> \g<8> \g<9> \g<10> \g<11>',
        event,
        flags=re.X
      );

      # Parse the reminder and event date and time fields:
      event = event.split(' ', maxsplit=10)
      for i in range(0,10):
        event[i] = int(event[i])

      # Assign them appropriately:
      remind_event_year = event[0]
      remind_event_month = event[1]
      remind_event_day = event[2]
      remind_event_hour = event[3]
      remind_event_minute = event[4]
      event_year = remind_event_year if snoozed else event[5]
      event_month = remind_event_month if snoozed else event[6]
      event_day = remind_event_day if snoozed else event[7]
      event_hour = remind_event_hour if snoozed else event[8]
      event_minute = remind_event_minute if snoozed else event[9]

      # Construct the dates for the range comparison:
      event_date = date(year=event_year, month=event_month, day=event_day)
      start = date(year=year, month=month or 1, day=day or 1)
      end = start if delta is None else start + delta

      # Determine whether the event matches the criteria represented by the input to the function:
      if (start <= event_date) and (event_date <= end):
        if snoozed or include_remind_time:
          event[10] = (
            event[10] +
            f' ({"Snooze until" if snoozed else "Reminder at"}'
            f' {remind_event_year:04}-{remind_event_month:02}-{remind_event_day:02}'
            f' {remind_event_hour:02}:{remind_event_minute:02})'
          )
        events.append(event)

    return events


def sort_events(events):
  # Sort the entries:
  return sorted(events, key=lambda x: (x[5], x[6], x[7], x[8], x[9]))

def format_events(events):
  # Add back the separators and quotes:
  formatted_events = [f'{x[5]:04}-{x[6]:02}-{x[7]:02} {x[8]:02}:{x[9]:02} {x[10]}' for x in events]
  return formatted_events


def main(calendar_file, modifier, time_period, include_snoozes, include_remind_time):
  if m := re.fullmatch(r'(\d{1,4})(-(\d{1,2}))?(-(\d{1,2}))?', time_period):
    year = int(m.groups()[0])
    month = int(m.groups()[2]) if m.groups()[2] is not None else None
    day = int(m.groups()[4]) if m.groups()[4] is not None else None
    delta = None
  elif re.fullmatch(r'today', time_period):
    today = date.today()
    year = today.year
    month = today.month
    day = today.day
    delta = None
  elif re.fullmatch(r'month', time_period):
    today = date.today()
    year = today.year
    month = today.month
    day = None
    delta = None
  elif re.fullmatch(r'year', time_period):
    today = date.today()
    year = today.year
    month = None
    day = None
    delta = None
  elif re.fullmatch(r'tomorrow', time_period):
    tomorrow = date.today() + timedelta(days=1)
    year = tomorrow.year
    month = tomorrow.month
    day = tomorrow.day
    delta = None
  elif re.fullmatch(r'yesterday', time_period):
    yesterday = date.today() + timedelta(days=-1)
    year = yesterday.year
    month = yesterday.month
    day = yesterday.day
    delta = None
  elif re.fullmatch(r'week', time_period):
    today = date.fromtimestamp(time.time())
    start = today - timedelta(days=today.weekday())
    if modifier == "next":
      start += timedelta(weeks=1)
    elif modifier == "last":
      start -= timedelta(weeks=1)
    year = start.year
    month = start.month
    day = start.day
    delta = timedelta(days=6)
  elif m := re.fullmatch(
      r'(monday|tuesday|wednesday|thursday|friday|saturday|sunday)',
      time_period
  ):
    dow = m.groups()[0]
    today = date.fromtimestamp(time.time())
    monday = today - timedelta(days=today.weekday())
    if dow == "monday":
      start = monday
    elif dow == "tuesday":
      start = monday + timedelta(days=1)
    elif dow == "wednesday":
      start = monday + timedelta(days=2)
    elif dow == "thursday":
      start = monday + timedelta(days=3)
    elif dow == "friday":
      start = monday + timedelta(days=4)
    elif dow == "saturday":
      start = monday + timedelta(days=5)
    elif dow == "sunday":
      start = monday + timedelta(days=6)
    else:
      print(f"{dow}? Sure, I'll work on it.")
      sys.exit(1)

    if modifier == "next":
      start += timedelta(weeks=1)
    elif modifier == "last":
      start -= timedelta(weeks=1)

    year = start.year
    month = start.month
    day = start.day
    delta = None
  else:
    print(f"Illegal time period: {time_period}")
    sys.exit(1)

  events = get_events(calendar_file, include_snoozes, include_remind_time, year, month, day, delta)
  events = sort_events(events)
  print('\n'.join(format_events(events)))


if __name__ == "__main__":
  parser = argparse.ArgumentParser(description="Simple Reminder Calendar")
  parser.add_argument(
    '-f', '--file', metavar='FILE',
    help="Use the given calendar file instead of '~/.mycalendar.txt'"
  )
  parser.add_argument(
    '-a', '--all',
    help='Also show snoozed events that will trigger reminders during the given period',
    action="store_true"
  )
  parser.add_argument(
    '-r', '--reminders',
    help='Show the date and time at which the reminder for a given event will be triggered',
    action="store_true"
  )
  parser.add_argument('MODIFIER', choices=['this', 'next', 'last'], nargs='?')
  parser.add_argument('PERIOD', help="Can be one of: year, month, week, monday, \
  tuesday, wednesday, thursday, friday, saturday, sunday, today, tomorrow, yesterday \
  yyyy-mm-dd, yyyy-mm, yyyy")
  args = parser.parse_args()
  main(
    args.file,
    args.MODIFIER.lower() if args.MODIFIER else args.MODIFIER,
    args.PERIOD.lower(),
    args.all,
    args.reminders
  )
