#!/usr/bin/env python3

# Copyright 2014-2024 Michael Cuffaro
# 
# This file is part of mccal.
# 
# mccal is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# mccal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with mccal.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import re
from datetime import date


def get_events(calendar_file, include_snoozes, year, month, day):
  with open(calendar_file) as f:
    events = []
    for line in f:
      line = line.rstrip('\n')
      snoozed = line.startswith('SNOOZE')
      if not include_snoozes and snoozed:
        continue
      # remove the initial id portion of the line:
      event = re.sub("^(SNOOZE )?ID:\S+ ", "", line)

      # remove date and time separators ("/" and ":")
      event = re.sub(
        r"""
        ([0-9]{1,4})-
        ([0-9]{1,2})-
        ([0-9]{1,2})\s+
        ([0-9]{1,2}):
        ([0-9]{1,2})\s+
        "
        ([0-9]{1,4})-
        ([0-9]{1,2})-
        ([0-9]{1,2})\s+
        ([0-9]{1,2}):
        ([0-9]{1,2})\s+
        (.*?)
        "
        """,
        '\g<1> \g<2> \g<3> \g<4> \g<5> \g<6> \g<7> \g<8> \g<9> \g<10> \g<11>',
        event,
        flags=re.X
      );
      event = event.split(' ', maxsplit=10)
      for i in range(0,10):
        event[i] = int(event[i])

      if ((not snoozed and event[5] == year and event[6] == month and event[7] == day) or
          (snoozed and event[0] == year and event[1] == month and event[2] == day)):
        if snoozed:
          event[10] = event[10] + ' (Snooze)'
        events.append(event)

    return events


def sort_events(events):
  # Sort the entries:
  return sorted(events, key=lambda x: (x[5], x[6], x[7], x[8], x[9]))

def format_events(events):
  # Add back the separators and quotes:
  formatted_events = [
    f'{x[0]}-{x[1]}-{x[2]} {x[3]}:{x[4]} "{x[5]}-{x[6]}-{x[7]} {x[8]}:{x[9]} {x[10]}"'
    for x in events
  ]
  return formatted_events


def main(calendar_file, modifier, time_period, include_snoozes):
  if m := re.fullmatch(r'(\d{1,4})(-(\d{1,2}))?(-(\d{1,2}))?', time_period):
    year = int(m.groups()[0])
    month = int(m.groups()[2])
    day = int(m.groups()[4])
  elif re.fullmatch(r'today', time_period):
    today = date.today()
    year = today.year
    month = today.month
    day = today.day
  elif re.fullmatch(r'month', time_period):
    print("month")
  elif re.fullmatch(r'year', time_period):
    print("year")
  else:
    print("Miscellaneous")

  events = get_events(calendar_file, include_snoozes, year, month, day)
  events = sort_events(events)
  print('\n'.join(format_events(events)))


if __name__ == "__main__":
  parser = argparse.ArgumentParser(description="Simple Reminder Calendar")
  parser.add_argument(
    '-f', '--file', metavar='FILE',
    help="Use the given calendar file instead of '~/.mycalendar.txt'"
  )
  parser.add_argument(
    '-a', '--all',
    help='Also show snoozed events that will trigger reminders during the given period',
    action="store_true"
  )
  parser.add_argument('MODIFIER', choices=['next', 'last'], nargs='?')
  parser.add_argument('PERIOD', help="Can be one of: year, month, week, monday, \
  tuesday, wednesday, thursday, friday, saturday, sunday, today, tomorrow, yesterday \
  yyyy-mm-dd, yyyy-mm, yyyy")
  args = parser.parse_args()
  main(args.file, args.MODIFIER, args.PERIOD, args.all)
