#!/usr/bin/perl

# Copyright 2014 Michael Cuffaro
# 
# This file is part of mccal.
# 
# mccal is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# mccal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with mccal.  If not, see <http://www.gnu.org/licenses/>.


BEGIN {
	push @INC, "/home/mike/lib";
}

use strict;
use DateTime;
use Time::HiRes qw ( time );
use commonfuncs;

chomp (my $timeZone = `cat /etc/timezone`);
my $processedEventsFilename = "$ENV{HOME}/.mycalendar_processed.txt";

sub WriteIdToProcessedEventsFile {
	my ($idToWrite) = @_;

	# write the id of the event to the processed events file
    if (!open(OUTFILE, ">> $processedEventsFilename")) {
		MailError "cannot open $processedEventsFilename: $!";
		return 0;
    }

	print OUTFILE "$idToWrite\n";
	close OUTFILE;
}

##############################################################################
### main code starts here
### TO CONTROL WHERE THE WINDOW POPS UP USE .Xresources

my ($calFilename, $id, $reminder) = split / /, "@ARGV", 3;
my ($text, $commands) = split /;/, $reminder, 2; 

# Write the event id to the processed events file. Note that the reason we do
# this immediately is because if we don't, and the user doesn't either dismiss
# or snooze the reminder before findappointment enters its next iteration,
# then findappointment will view the event as unprocessed and pop up another
# reminder for the same event, and so on and on and on.
WriteIdToProcessedEventsFile($id);

# first thing to do is run all the commands for this reminder:
my $reminderCommands = $commands;
while (my ($comm1, $comm2) = split /;/, $reminderCommands, 2) {
    if (system("$comm1 &") != 0) {
	die "Error calling $comm1 $!";
    }
    $reminderCommands = $comm2;
}

# now pop up the reminder message:

print "\a"; # sound the system bell
my $userResponse;
my $retVal;
my $prog = "gxmessage -bg lightgrey -entry -wrap "
	. "-buttons \'Snooze:0,Dismiss:1\' "
	. "-default Snooze -title \'mccal reminder\' "
	. "\""
	. "$text \n\n"
	. "Either click Dismiss to confirm or enter the amount\n"
	. "of time you would like to snooze this alarm for\n"
	. "(<num>\[m\|h\|d\])."
	. "\"";
do {
	$userResponse = `$prog`;
	$retVal = $?;
} while ($retVal == 0
		 && ($userResponse !~ /^[0-9]+[mhd]{0,1}$/
			 || $userResponse =~ /^0+[mhd]{0,1}/));

if ($retVal != 0) {
	# user pressed the Dismiss button.
	exit 0;
}

my $snooze;
# convert user response into seconds
if ($userResponse =~ /(.*)([mhd])$/) {
	$snooze = $1;
	my $timeModifier = $2;
	if ($timeModifier eq "h") {
		$snooze *= 3600;
	}
	elsif ($timeModifier eq "d") {
		$snooze *= 86400;
	}
	else {
		$snooze *= 60;
	}
}
else {
	$snooze = $userResponse *= 60;
}

# reset the time to current time in case there has been a long delay between
# user responses
my $alarmDate = DateTime->now;
$alarmDate->set_time_zone($timeZone);
$alarmDate->set(second => 0);
$alarmDate->add(seconds => $snooze);

open(CALFILE, ">> $calFilename") 
    or die "cannot open $calFilename: $!";

# generate a new event id:
$id = time;

print CALFILE "SNOOZE ID:$id " . $alarmDate->year . "-" . $alarmDate->month . "-" . $alarmDate->day . " " .
    $alarmDate->hour . ":" . $alarmDate->minute . " " . $text;

if (defined $commands) {
    print CALFILE ";" . $commands;
}
print CALFILE "\n";

close CALFILE;
