#!/usr/bin/env python3

# Copyright 2006-2024 Michael Cuffaro
# 
# This file is part of mccal.
# 
# mccal is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# mccal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with mccal.  If not, see <http://www.gnu.org/licenses/>.

import argparse
from pathlib import Path


def main(calfile, procfile, pausefile_name, sleep_secs, timezone, use_text_mode, send_mail):
  print(f"calfile: {calfile}, procfile: {procfile}, pausefile_name: {pausefile_name}, "
        f"sleep_secs: {sleep_secs}, timezone: {timezone}, use_text_mode: {use_text_mode}, "
        f"send_mail: {send_mail}")



if __name__ == "__main__":
  default_calfile = f"{str(Path.home())}/.mycalendar.txt"
  default_procfile = f"{str(Path.home())}/.mycalendar_processed.txt"
  default_pausefile = f"{str(Path.home())}/.pause_mccal"
  default_sleep = 300
  with open("/etc/timezone", "r") as f:
    default_tz = f.read().strip('\n')

  parser = argparse.ArgumentParser(description="Simple reminder calendar -- findappointment")
  parser.add_argument(
    '--cal_file', metavar='FILE',
    type=argparse.FileType('r'),
    help=f"read from the calendar FILE instead of from '{default_calfile}'"
  )
  parser.add_argument(
    '--proc_file', metavar='FILE',
    type=argparse.FileType('r'),
    help=f"use FILE for writing processed events to instead of '{default_procfile}'"
  )
  parser.add_argument(
    '--pause_file', metavar='FILE',
    help=(f"use the existence of FILE, instead of '{default_pausefile}', as an indication "
          "to findappointment that it should postpone any user notifications until the next "
          "iteration")
  )
  parser.add_argument(
    '--sleep', metavar='N',
    help=(f"sleep for N seconds, instead of the default {default_sleep}, between "
          "iterations"),
    type=int
  )
  parser.add_argument(
    '--timezone',
    help=f"use TIMEZONE instead of the default for this locale: '{default_tz}'",
  )
  parser.add_argument(
    '--text_mode',
    help="write all reminder notifications to the console",
    action='store_true'
  )
  parser.add_argument(
    '--mail',
    help="send an email to the configured addressee in addition to a notification",
    action='store_true'
  )
  args = parser.parse_args()

  main(
    args.cal_file or default_calfile,
    args.proc_file or default_procfile,
    args.pause_file or default_pausefile,
    args.sleep or default_sleep,
    args.timezone or default_tz,
    args.text_mode,
    args.mail
  )
