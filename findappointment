#!/usr/bin/perl

# Copyright 2014-2016 Michael Cuffaro
# 
# This file is part of mccal.
# 
# mccal is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# mccal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with mccal.  If not, see <http://www.gnu.org/licenses/>.


BEGIN {
	push @INC, "/home/mike/lib";
}

use strict;
use DateTime;
use commonfuncs;

my $calFilename = "$ENV{HOME}/.mycalendar.txt";
my $processedEventsFilename = "$ENV{HOME}/.mycalendar_processed.txt";
chomp (my $timeZone = `cat /etc/timezone`);
my $sleep_val = 90;

sub SearchForID {
	# searches line by line. Match is by whole line only.
	my ($stringToCheck) = @_;

    if (!open(INFILE, "< $processedEventsFilename")) {
		MailError "cannot open $processedEventsFilename: $!";
		return 0;
    }

    while (chomp(my $nextLine = <INFILE>)) {
		return 1 if $nextLine =~ $stringToCheck;
	}

	return 0;
}

#############################################################################
# main processing starts here

for (;;) {
	if (system("synccal --pull") != 0) {
		MailError("Could not retrieve remote calendar: $!");
	}
    if (!open(CALFILE, "< $calFilename")) {
		MailError "cannot open $calFilename: $!";
		sleep $sleep_val;
		next;
    }

    my $currDate = DateTime->now;
    $currDate->set_time_zone($timeZone);
    $currDate->set(second => 0);
    
    my @reminder_queue;
    while (chomp(my $nextLine = <CALFILE>)) {
		next if $nextLine =~ /^\s*([\#]+.*)*\s*$/;  # ignore comments
		$nextLine =~ s/^SNOOZE (.*)/$1/;   # disregard the snooze marker

		(my $tmpId, my $dom, my $tod, my $text) = split / /, $nextLine, 4;
		(my $dummy, my $id) = split /:/, $tmpId;

		# keep going if we've already processed this entry
		next if (SearchForID($id) == 1);

		# possibly put the next entry in the reminder queue
		(my $year, my $month, my $day) = split /-/, $dom;
		(my $hour, my $minute) = split /:/, $tod;

		my $appDate = DateTime->new(year => $year,
				    month => $month,
				    day => $day,
				    hour => $hour,
				    minute => $minute,
				    time_zone => $timeZone);
	
		if ($currDate >= $appDate) {
			# add the text to the reiminder queue along with the event's id:
			my $idAndTextString = $id . "," . $text;
	    	push @reminder_queue, $idAndTextString;
		}
    }
    
    close CALFILE;
    
    foreach my $reminder (@reminder_queue) {
		# extract the id:
		(my $idToSend, my $textToSend) = split /,/, $reminder, 2;

		# quote the string so the ';'s don't disturb anything
		$textToSend = "\'" . $textToSend . "\'";

		my $command = "remind " . $calFilename . " " . $idToSend . " "
			. $textToSend . " &";
		if (system($command) != 0) {
	    	MailError("Error calling remind program $!");
		}
    }
    
    sleep $sleep_val;
} # end of main loop
