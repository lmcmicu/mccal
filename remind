#!/usr/bin/env python3

# Copyright 2006-2024 Michael Cuffaro
#
# This file is part of mccal.
#
# mccal is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# mccal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with mccal.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import re
import sys
import time
import wx
from datetime import datetime, timedelta


global answer


def process_reminder_ui(reminder_text, event_id, calfile):
  def on_dismiss(_event):
    sys.exit(0)

  def on_answer(_event):
    on_snooze(_event)

  def on_snooze(_event):
    m = re.fullmatch(r"([\d]+)([mhd])?", answer.GetValue())
    if not m:
      wx.MessageDialog(
        None,
        f"Invalid snooze value: '{answer.GetValue()}'. Please use <num>[m|h|d] format.",
      ).ShowModal()
    else:
      snooze = int(m.groups()[0])
      if snooze < 1:
        wx.MessageDialog(
          None,
          "Sorry but you can't snooze for less than 1 minute. Please try again."
        ).ShowModal()
      else:
        time_modifier = m.groups()[1] if len(m.groups()) > 1 else "m"
        if time_modifier == "h":
          snooze *= 3600
        elif time_modifier == "d":
          snooze *= 86400
        else:
          snooze *= 60

        # Reset the base for the alarm time to the current time, since in principle a long time can
        # have passed between the time that the dialog was first popped up and the time that this
        # response has been received.
        alarm_date = datetime.today()
        alarm_date = alarm_date.replace(second=0, microsecond=0)
        # Move the alarm time forward by the amount indicated by `snooze`:
        alarm_date = alarm_date + timedelta(seconds=snooze)

        # Generate a new event id for the snooze event that we will be recording:
        id = time.time()

        # Use the id to record the details of the snooze event to the calendar file:
        print(f'SNOOZE ID:{id} {alarm_date.year}-{alarm_date.month}-{alarm_date.day} '
              f'{alarm_date.hour}:{alarm_date.minute} "{reminder_text}"',
              file=calfile)

        calfile.close()
        sys.exit(0)

  app = wx.App()

  reminder_text = reminder_text.strip('\"')

  frame = wx.Frame(None, title='mccal reminder')
  main_panel = wx.Panel(frame)
  content_panel = wx.Panel(main_panel)
  message_panel = wx.Panel(content_panel)
  question_panel = wx.Panel(content_panel)
  answer_panel = wx.Panel(content_panel)
  button_panel = wx.Panel(content_panel)

  message = wx.StaticText(message_panel, -1, label=f"{reminder_text}")
  message_box = wx.BoxSizer(wx.HORIZONTAL)
  message_box.Add(message)
  message_panel.SetSizerAndFit(message_box)

  question = wx.StaticText(
    question_panel,
    -1,
    label="Either click Dismiss to confirm or enter the amount\n"
    "of time you would like to snooze this alarm for\n"
    "(<num>[m|h|d])."
  )
  question_box = wx.BoxSizer(wx.HORIZONTAL)
  question_box.Add(question)
  question_panel.SetSizerAndFit(question_box)

  answer = wx.TextCtrl(
    answer_panel,
    value="",
    style=wx.TE_PROCESS_ENTER,
    size=(question.GetSize().GetWidth(), 30)
  )
  answer.Bind(wx.EVT_TEXT_ENTER, on_answer, answer)
  answer_box = wx.BoxSizer(wx.HORIZONTAL)
  answer_box.Add(answer)
  answer_panel.SetSizerAndFit(answer_box)

  snooze_btn = wx.Button(button_panel, label="Snooze")
  dismiss_btn = wx.Button(button_panel, label="Dismiss")
  snooze_btn.Bind(wx.EVT_BUTTON, on_snooze, snooze_btn)
  dismiss_btn.Bind(wx.EVT_BUTTON, on_dismiss, dismiss_btn)
  button_box = wx.BoxSizer(wx.HORIZONTAL)
  button_box.Add(snooze_btn)
  button_box.Add(dismiss_btn)
  button_panel.SetSizerAndFit(button_box)

  content_box = wx.BoxSizer(wx.VERTICAL)
  content_box.AddSpacer(12)
  content_box.Add(message_panel, 0, wx.ALL | wx.ALIGN_LEFT)
  content_box.AddSpacer(12)
  content_box.Add(question_panel, 0, wx.ALL | wx.ALIGN_LEFT)
  content_box.AddSpacer(12)
  content_box.Add(answer_panel, 0, wx.ALL | wx.ALIGN_LEFT)
  content_box.AddSpacer(12)
  content_box.Add(button_panel, 0, wx.ALL | wx.ALIGN_RIGHT)
  content_box.AddSpacer(8)
  content_panel.SetSizerAndFit(content_box)

  main_box = wx.BoxSizer(wx.HORIZONTAL)
  main_box.AddSpacer(12)
  main_box.Add(content_panel, 0, wx.ALL | wx.ALIGN_CENTER)
  main_box.AddSpacer(12)
  main_panel.SetSizerAndFit(main_box)

  frame.Fit()
  frame.SetMinSize(frame.GetBestSize())
  frame.Center()
  frame.Show()

  app.MainLoop()
  app.Destroy()


def process_reminder_stdout(reminder_text):
  # Simply output the reminder_text to STDOUT.
  print(reminder_text)


def write_id_to_processed_events_file(event_id, procfile):
  print(event_id, file=procfile)


def main(calfile, procfile, event_id, reminder_text, text_mode):
  # Mark the event as processed by writing it to procfile
  with open(procfile, mode='a') as procfile:
    write_id_to_processed_events_file(event_id, procfile)

  if text_mode:
    process_reminder_stdout(reminder_text)
  else:
    with open(calfile, mode='a') as calfile:
      process_reminder_ui(reminder_text, event_id, calfile)


if __name__ == "__main__":
  parser = argparse.ArgumentParser(description="Simple reminder calendar -- remind")
  parser.add_argument('CALENDAR', help='a calendar file')
  parser.add_argument('PROC_EVENTS', help='the file where the processed event information will be '
                      'written to')
  parser.add_argument('ID', help='the event ID associated with this reminder')
  parser.add_argument('REMINDER_TEXT', help='the text associated with this reminder')
  parser.add_argument('-t', '--text_mode', action='store_true',
                      help='after processing the reminder, output the reminder text to STDOUT '
                      'and exit, without providing the user with an option to snooze')
  args = parser.parse_args()
  main(args.CALENDAR, args.PROC_EVENTS, args.ID, args.REMINDER_TEXT, args.text_mode)
